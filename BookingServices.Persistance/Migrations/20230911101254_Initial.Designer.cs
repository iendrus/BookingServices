// <auto-generated />
using System;
using BookingServices.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingServices.Persistance.Migrations
{
    [DbContext(typeof(BookingServicesDbContext))]
    [Migration("20230911101254_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingServices.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("RecipientId")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("OfferId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("State");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 9, 11, 12, 12, 54, 310, DateTimeKind.Local).AddTicks(7226),
                            CreatedBy = 1,
                            Description = "Uroda; Styl życia",
                            IsActive = true,
                            Name = "Beauty"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 9, 11, 12, 12, 54, 310, DateTimeKind.Local).AddTicks(7292),
                            CreatedBy = 1,
                            Description = "Rozrywka, zabawa",
                            IsActive = true,
                            Name = "Fun"
                        });
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndOfService")
                        .HasPrecision(0)
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("PerformerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartOfService")
                        .HasPrecision(0)
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EndOfService");

                    b.HasIndex("IsActive");

                    b.HasIndex("IsAvailable");

                    b.HasIndex("PerformerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StartOfService");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Performer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ProviderId");

                    b.ToTable("Performers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 9, 11, 12, 12, 54, 310, DateTimeKind.Local).AddTicks(9390),
                            CreatedBy = 1,
                            IsActive = true,
                            Phone = "200300400",
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 9, 11, 12, 12, 54, 310, DateTimeKind.Local).AddTicks(9405),
                            CreatedBy = 1,
                            IsActive = true,
                            Phone = "500666444",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 9, 11, 12, 12, 54, 310, DateTimeKind.Local).AddTicks(9412),
                            CreatedBy = 1,
                            IsActive = true,
                            Phone = "505606707",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 9, 11, 12, 12, 54, 310, DateTimeKind.Local).AddTicks(9419),
                            CreatedBy = 1,
                            IsActive = true,
                            Phone = "200300400",
                            ProviderId = 3
                        });
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("ProviderId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 9, 11, 12, 12, 54, 310, DateTimeKind.Local).AddTicks(8789),
                            CreatedBy = 1,
                            Description = "Beauty",
                            IsActive = true,
                            Name = "Idealny Makeup",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 9, 11, 12, 12, 54, 310, DateTimeKind.Local).AddTicks(8806),
                            CreatedBy = 1,
                            Description = "Bez draśnięcia",
                            IsActive = true,
                            Name = "Golenie jak złoto",
                            ProviderId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 9, 11, 12, 12, 54, 310, DateTimeKind.Local).AddTicks(8813),
                            CreatedBy = 1,
                            Description = "Będzie Pani zadowolona",
                            IsActive = true,
                            Name = "Kolor za zeta",
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 9, 11, 12, 12, 54, 310, DateTimeKind.Local).AddTicks(8820),
                            CreatedBy = 1,
                            Description = "Full wypas",
                            IsActive = true,
                            Name = "Jazda na całego",
                            ProviderId = 3
                        });
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.ProductPerformer", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PerformerId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "PerformerId");

                    b.HasIndex("PerformerId");

                    b.ToTable("ProductPerformers");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            PerformerId = 2
                        },
                        new
                        {
                            ProductId = 3,
                            PerformerId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            PerformerId = 3
                        },
                        new
                        {
                            ProductId = 4,
                            PerformerId = 4
                        });
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nip")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.HasIndex("IsActive");

                    b.ToTable("Providers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 9, 11, 12, 12, 54, 310, DateTimeKind.Local).AddTicks(7910),
                            CreatedBy = 1,
                            IndustryId = 1,
                            IsActive = true,
                            Name = "Prześwietny Salon Art-Design"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 9, 11, 12, 12, 54, 310, DateTimeKind.Local).AddTicks(7924),
                            CreatedBy = 1,
                            IndustryId = 1,
                            IsActive = true,
                            Name = "Colormix"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 9, 11, 12, 12, 54, 310, DateTimeKind.Local).AddTicks(7931),
                            CreatedBy = 1,
                            IndustryId = 2,
                            IsActive = true,
                            Name = "Śmiechu warte"
                        });
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Recipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.ToTable("Recipients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 9, 11, 12, 12, 54, 310, DateTimeKind.Local).AddTicks(8885),
                            CreatedBy = 1,
                            IsActive = true,
                            Phone = "500500500"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 9, 11, 12, 12, 54, 310, DateTimeKind.Local).AddTicks(8896),
                            CreatedBy = 1,
                            IsActive = true,
                            Phone = "603604605"
                        });
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Booking", b =>
                {
                    b.HasOne("BookingServices.Domain.Entities.Offer", "Offer")
                        .WithMany("Bookings")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingServices.Domain.Entities.Recipient", "Recipient")
                        .WithMany("Bookings")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offer");

                    b.Navigation("Recipient");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Offer", b =>
                {
                    b.HasOne("BookingServices.Domain.Entities.Performer", "Performer")
                        .WithMany("Offers")
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookingServices.Domain.Entities.Product", "Product")
                        .WithMany("Offers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Performer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Performer", b =>
                {
                    b.HasOne("BookingServices.Domain.Entities.Provider", "Provider")
                        .WithMany("Performers")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BookingServices.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("PerformerId")
                                .HasColumnType("int");

                            b1.Property<string>("DomainName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("PerformerId");

                            b1.ToTable("Performers");

                            b1.WithOwner()
                                .HasForeignKey("PerformerId");

                            b1.HasData(
                                new
                                {
                                    PerformerId = 1,
                                    DomainName = "op.pl",
                                    UserName = "kaska"
                                },
                                new
                                {
                                    PerformerId = 2,
                                    DomainName = "wp.pl",
                                    UserName = "janko"
                                },
                                new
                                {
                                    PerformerId = 3,
                                    DomainName = "zix.com",
                                    UserName = "zenobio"
                                },
                                new
                                {
                                    PerformerId = 4,
                                    DomainName = "smiechu.pl",
                                    UserName = "stiwi"
                                });
                        });

                    b.OwnsOne("BookingServices.Domain.ValueObjects.PersonName", "FullName", b1 =>
                        {
                            b1.Property<int>("PerformerId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("PerformerId");

                            b1.ToTable("Performers");

                            b1.WithOwner()
                                .HasForeignKey("PerformerId");

                            b1.HasData(
                                new
                                {
                                    PerformerId = 1,
                                    FirstName = "Kasia",
                                    LastName = "Łaskawa"
                                },
                                new
                                {
                                    PerformerId = 2,
                                    FirstName = "Janusz",
                                    LastName = "Obeznany"
                                },
                                new
                                {
                                    PerformerId = 3,
                                    FirstName = "Zenon",
                                    LastName = "Gruszka"
                                },
                                new
                                {
                                    PerformerId = 4,
                                    FirstName = "Stefan",
                                    LastName = "Onieśmielający"
                                });
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Product", b =>
                {
                    b.HasOne("BookingServices.Domain.Entities.Provider", "Provider")
                        .WithMany("Products")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.ProductPerformer", b =>
                {
                    b.HasOne("BookingServices.Domain.Entities.Performer", "Performer")
                        .WithMany("ProductPerformers")
                        .HasForeignKey("PerformerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingServices.Domain.Entities.Product", "Product")
                        .WithMany("ProductPerformers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Performer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Provider", b =>
                {
                    b.HasOne("BookingServices.Domain.Entities.Industry", "Industry")
                        .WithMany("Providers")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BookingServices.Domain.ValueObjects.PersonName", "ContactPerson", b1 =>
                        {
                            b1.Property<int>("ProviderId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("ProviderId");

                            b1.ToTable("Providers");

                            b1.WithOwner()
                                .HasForeignKey("ProviderId");

                            b1.HasData(
                                new
                                {
                                    ProviderId = 1,
                                    FirstName = "Bob",
                                    LastName = "Kaminski"
                                },
                                new
                                {
                                    ProviderId = 2,
                                    FirstName = "Lukas",
                                    LastName = "Kolorowy"
                                },
                                new
                                {
                                    ProviderId = 3,
                                    FirstName = "Anna",
                                    LastName = "Zasępiona"
                                });
                        });

                    b.OwnsOne("BookingServices.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("ProviderId")
                                .HasColumnType("int");

                            b1.Property<string>("DomainName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("ProviderId");

                            b1.ToTable("Providers");

                            b1.WithOwner()
                                .HasForeignKey("ProviderId");

                            b1.HasData(
                                new
                                {
                                    ProviderId = 1,
                                    DomainName = "op.pl",
                                    UserName = "art-design"
                                },
                                new
                                {
                                    ProviderId = 2,
                                    DomainName = "wp.pl",
                                    UserName = "color"
                                },
                                new
                                {
                                    ProviderId = 3,
                                    DomainName = "smiechu.pl",
                                    UserName = "warte"
                                });
                        });

                    b.OwnsOne("BookingServices.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ProviderId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("City");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("Number");

                            b1.Property<string>("Street")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("ZipCode");

                            b1.HasKey("ProviderId");

                            b1.ToTable("Providers");

                            b1.WithOwner()
                                .HasForeignKey("ProviderId");

                            b1.HasData(
                                new
                                {
                                    ProviderId = 1,
                                    City = "Dulcza",
                                    Number = "14",
                                    Street = "Miła",
                                    ZipCode = "33-220"
                                },
                                new
                                {
                                    ProviderId = 2,
                                    City = "Flismanowa",
                                    Number = "234A",
                                    ZipCode = "32-120"
                                },
                                new
                                {
                                    ProviderId = 3,
                                    City = "Lasków",
                                    Number = "22/165",
                                    Street = "Dębowa",
                                    ZipCode = "27-100"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("ContactPerson")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Recipient", b =>
                {
                    b.OwnsOne("BookingServices.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("RecipientId")
                                .HasColumnType("int");

                            b1.Property<string>("DomainName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("RecipientId");

                            b1.ToTable("Recipients");

                            b1.WithOwner()
                                .HasForeignKey("RecipientId");

                            b1.HasData(
                                new
                                {
                                    RecipientId = 1,
                                    DomainName = "dw.pl",
                                    UserName = "rob"
                                },
                                new
                                {
                                    RecipientId = 2,
                                    DomainName = "pkp.pl",
                                    UserName = "asiaf"
                                });
                        });

                    b.OwnsOne("BookingServices.Domain.ValueObjects.PersonName", "FullName", b1 =>
                        {
                            b1.Property<int>("RecipientId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("LastName");

                            b1.HasKey("RecipientId");

                            b1.ToTable("Recipients");

                            b1.WithOwner()
                                .HasForeignKey("RecipientId");

                            b1.HasData(
                                new
                                {
                                    RecipientId = 1,
                                    FirstName = "Robert",
                                    LastName = "Laskowski"
                                },
                                new
                                {
                                    RecipientId = 2,
                                    FirstName = "Joanna",
                                    LastName = "Ferdel"
                                });
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Industry", b =>
                {
                    b.Navigation("Providers");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Offer", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Performer", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("ProductPerformers");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Product", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("ProductPerformers");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Provider", b =>
                {
                    b.Navigation("Performers");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Recipient", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
