// <auto-generated />
using System;
using BookingServices.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingServices.Persistance.Migrations
{
    [DbContext(typeof(BookingServicesDbContext))]
    [Migration("20230613165534_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingServices.Domain.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Industries");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.PersonPerforming", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("PersonPerformings");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServicePorviderId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.ServicePerformance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndOfService")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("PersonPerformingId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceRecipientComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceRecipientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartOfService")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonPerformingId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceRecipientId");

                    b.ToTable("ServicePerformances");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.ServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IndustryId");

                    b.ToTable("ServiceProviders");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.ServiceRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceRecipients");
                });

            modelBuilder.Entity("ServicePersonPerforming", b =>
                {
                    b.Property<int>("PersonPerformingsId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("PersonPerformingsId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ServicePersonPerforming");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.PersonPerforming", b =>
                {
                    b.HasOne("BookingServices.Domain.Entities.ServiceProvider", "ServiceProvider")
                        .WithMany("PersonPerformings")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BookingServices.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("PersonPerformingId")
                                .HasColumnType("int");

                            b1.Property<string>("DomainName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonPerformingId");

                            b1.ToTable("PersonPerformings");

                            b1.WithOwner()
                                .HasForeignKey("PersonPerformingId");
                        });

                    b.OwnsOne("BookingServices.Domain.ValueObjects.PersonName", "FullName", b1 =>
                        {
                            b1.Property<int>("PersonPerformingId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("PersonPerformingId");

                            b1.ToTable("PersonPerformings");

                            b1.WithOwner()
                                .HasForeignKey("PersonPerformingId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Service", b =>
                {
                    b.HasOne("BookingServices.Domain.Entities.ServiceProvider", "ServiceProvider")
                        .WithMany("Services")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.ServicePerformance", b =>
                {
                    b.HasOne("BookingServices.Domain.Entities.PersonPerforming", "PersonPerforming")
                        .WithMany("ServicePerformances")
                        .HasForeignKey("PersonPerformingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookingServices.Domain.Entities.Service", "Service")
                        .WithMany("ServicePerformances")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookingServices.Domain.Entities.ServiceRecipient", "ServiceRecipient")
                        .WithMany("ServicePerformances")
                        .HasForeignKey("ServiceRecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonPerforming");

                    b.Navigation("Service");

                    b.Navigation("ServiceRecipient");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.ServiceProvider", b =>
                {
                    b.HasOne("BookingServices.Domain.Entities.Industry", "Industry")
                        .WithMany("ServiceProviders")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BookingServices.Domain.ValueObjects.PersonName", "ContactPerson", b1 =>
                        {
                            b1.Property<int>("ServiceProviderId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ServiceProviderId");

                            b1.ToTable("ServiceProviders");

                            b1.WithOwner()
                                .HasForeignKey("ServiceProviderId");
                        });

                    b.OwnsOne("BookingServices.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("ServiceProviderId")
                                .HasColumnType("int");

                            b1.Property<string>("DomainName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ServiceProviderId");

                            b1.ToTable("ServiceProviders");

                            b1.WithOwner()
                                .HasForeignKey("ServiceProviderId");
                        });

                    b.Navigation("ContactPerson")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Industry");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.ServiceRecipient", b =>
                {
                    b.OwnsOne("BookingServices.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("ServiceRecipientId")
                                .HasColumnType("int");

                            b1.Property<string>("DomainName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("UserName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ServiceRecipientId");

                            b1.ToTable("ServiceRecipients");

                            b1.WithOwner()
                                .HasForeignKey("ServiceRecipientId");
                        });

                    b.OwnsOne("BookingServices.Domain.ValueObjects.PersonName", "FullName", b1 =>
                        {
                            b1.Property<int>("ServiceRecipientId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ServiceRecipientId");

                            b1.ToTable("ServiceRecipients");

                            b1.WithOwner()
                                .HasForeignKey("ServiceRecipientId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("ServicePersonPerforming", b =>
                {
                    b.HasOne("BookingServices.Domain.Entities.PersonPerforming", null)
                        .WithMany()
                        .HasForeignKey("PersonPerformingsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BookingServices.Domain.Entities.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Industry", b =>
                {
                    b.Navigation("ServiceProviders");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.PersonPerforming", b =>
                {
                    b.Navigation("ServicePerformances");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.Service", b =>
                {
                    b.Navigation("ServicePerformances");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.ServiceProvider", b =>
                {
                    b.Navigation("PersonPerformings");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BookingServices.Domain.Entities.ServiceRecipient", b =>
                {
                    b.Navigation("ServicePerformances");
                });
#pragma warning restore 612, 618
        }
    }
}
